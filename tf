{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    }
   ],
   "source": [
    "import pyodbc\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "from IPython.display import display\n",
    "%pylab inline\n",
    "from tqdm import tqdm\n",
    "\n",
    "import sklearn as sk\n",
    "import sklearn.tree as tree\n",
    "from IPython.display import Image \n",
    "import pydotplus\n",
    "from sklearn.model_selection import train_test_split # Import train_test_split function\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "# evaluate RFE for regression\n",
    "from numpy import mean\n",
    "from numpy import std\n",
    "from sklearn.datasets import make_regression\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import RepeatedKFold\n",
    "from sklearn.feature_selection import RFE\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "import xgboost as xgb\n",
    "from xgboost import XGBRegressor\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "from datetime import datetime\n",
    "\n",
    "from sklearn.pipeline import Pipeline\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.feature_selection import SelectKBest\n",
    "from sklearn.feature_selection import chi2\n",
    "from sklearn.model_selection import KFold\n",
    "from pprint import pprint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#aynı beslenen kolonları tekilleştirir:\n",
    "def drop_duplicate_columns(train_x, dummy_columns_prefix='DMY_'):\n",
    "    \"\"\"\n",
    "\n",
    "    :param train_x:\n",
    "    :param test_x:\n",
    "    :param dummy_columns_prefix:\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    desc = train_x[[col for col in train_x.columns if not col.startswith(dummy_columns_prefix)]] \\\n",
    "        .describe()\n",
    "    desc = desc.loc[['mean', 'std'], :]\n",
    "    blacklist = []\n",
    "    duplicated_feat = {}\n",
    "    for i in range(0, len(desc.columns)):\n",
    "        if i % 250 == 0:  # this helps me understand how the loop is going\n",
    "            print(i)\n",
    "\n",
    "        col_1 = desc.columns[i]\n",
    "        if col_1 in blacklist:\n",
    "            continue\n",
    "\n",
    "        for col_2 in desc.columns[i + 1:]:\n",
    "            if desc[col_1].equals(desc[col_2]):\n",
    "                if col_1 not in duplicated_feat:\n",
    "                    duplicated_feat[col_1] = []\n",
    "                duplicated_feat[col_1].append(col_2)\n",
    "\n",
    "        blacklist = []\n",
    "        for sublist in [x for x in duplicated_feat.values()]:\n",
    "            for item in sublist:\n",
    "                blacklist.append(item)\n",
    "\n",
    "    train_x.drop(blacklist, axis=1, inplace=True)\n",
    "    #test_x.drop(blacklist, axis=1, inplace=True)\n",
    "    return blacklist\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#değişkenler arasındaki korelasyona bakar, %80 ve üzerini eler, \n",
    "#hangisinin eleneceği tek değişkenli random forest ile belirlenir importance'ı düşük olan elenir:\n",
    "\n",
    "def eliminate_group_correlation(X_train, Y_train, corrmat=None, threshold=0.5, seed=100): #%80 de baklılabilir\n",
    "    \"\"\"\n",
    "\n",
    "    :param X_train:\n",
    "    :param X_test:\n",
    "    :param Y_train:\n",
    "    :param target_column:\n",
    "    :param corrmat:\n",
    "    :param threshold:\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    if corrmat is None:\n",
    "        corrmat = X_train.corr()\n",
    "    corrmat = corrmat.abs().unstack()  # absolute value of corr coef\n",
    "    corrmat = corrmat.sort_values(ascending=False)\n",
    "    corrmat = corrmat[corrmat >= threshold]\n",
    "    corrmat = corrmat[corrmat < 1]\n",
    "    corrmat = pd.DataFrame(corrmat).reset_index()\n",
    "    corrmat.columns = ['feature1', 'feature2', 'corr']\n",
    "\n",
    "    # find groups of correlated features\n",
    "    grouped_feature_ls = []\n",
    "    correlated_groups = []\n",
    "\n",
    "    for feature in corrmat.feature1.unique():\n",
    "        if feature not in grouped_feature_ls:\n",
    "            # find all features correlated to a single feature\n",
    "            correlated_block = corrmat[corrmat.feature1 == feature]\n",
    "            grouped_feature_ls = grouped_feature_ls + list(\n",
    "                correlated_block.feature2.unique()) + [feature]\n",
    "\n",
    "            # append the block of features to the list\n",
    "            correlated_groups.append(correlated_block)\n",
    "\n",
    "    count = 0\n",
    "    drop_features = []\n",
    "    for group in correlated_groups:\n",
    "        count += 1\n",
    "        features = list(group.feature1.unique()) + list(group.feature2.unique())\n",
    "        rf = RandomForestRegressor(n_estimators=100, random_state=seed)\n",
    "        rf.fit(X_train[features], Y_train)\n",
    "        keep = features[rf.feature_importances_.argmax()]\n",
    "        features.remove(keep)\n",
    "        drop_features += features\n",
    "        if count % 10 == 0:\n",
    "            print(f'\\rFeature Collinearity Elimination Progress: {count} / {len(correlated_groups)}', end='')\n",
    "    return drop_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#tek değerli değişkenleri eler:\n",
    "\n",
    "def drop_constant(train_x):\n",
    "    \"\"\"\n",
    "\n",
    "    :param train_x:\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    numerical = train_x.select_dtypes(['int64', 'float64']).columns\n",
    "    constant_numerical = [feat for feat in numerical if train_x[feat].std() == 0]\n",
    "    train_x.drop(constant_numerical, axis=1, inplace=True)\n",
    "    #test_x.drop(constant_numerical, axis=1, inplace=True)\n",
    "\n",
    "    categorical = train_x.select_dtypes(['O']).columns\n",
    "    constant_categorical = [feat for feat in categorical if len(train_x[feat].unique()) == 1]\n",
    "    train_x.drop(constant_categorical, axis=1, inplace=True)\n",
    "    #test_x.drop(constant_categorical, axis=1, inplace=True)\n",
    "    dropped_cache = constant_categorical + constant_numerical\n",
    "    return dropped_cache"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_vars1=pd.read_excel('ticari_model_variables_'+str(datetime.today().strftime(\"%Y_%m_%d\"))+'.xlsx')\n",
    "model_vars2=pd.read_excel('ticari_model_rat_AVG_variables_'+str(datetime.today().strftime(\"%Y_%m_%d\"))+'.xlsx')\n",
    "model_vars3=pd.read_excel('ticari_model_rat_MIN_variables_'+str(datetime.today().strftime(\"%Y_%m_%d\"))+'.xlsx')\n",
    "model_vars4=pd.read_excel('ticari_model_rat_MAX_variables_'+str(datetime.today().strftime(\"%Y_%m_%d\"))+'.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>index</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>contactcode</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Sensibility_avg_rat_l1m_l3m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Current_UPB_Debt_rat_avg_rat_l1m_l3m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>ExpenseAmount_Debt_rat_avg_rat_l1m_l3m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>71</td>\n",
       "      <td>BrokeProtocolAmount_avg_rat_l6m_l12m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72</th>\n",
       "      <td>72</td>\n",
       "      <td>CanceledProtocolAmount_avg_rat_l6m_l12m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73</th>\n",
       "      <td>73</td>\n",
       "      <td>FulledTotalProtocolAmount_avg_rat_l6m_l12m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>74</td>\n",
       "      <td>LiveProtocolAmount_avg_rat_l6m_l12m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>75</td>\n",
       "      <td>TotalProtocolAmount_avg_rat_l6m_l12m</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>76 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Unnamed: 0                                           0\n",
       "0            0                                       index\n",
       "1            1                                 contactcode\n",
       "2            2                 Sensibility_avg_rat_l1m_l3m\n",
       "3            3        Current_UPB_Debt_rat_avg_rat_l1m_l3m\n",
       "4            4      ExpenseAmount_Debt_rat_avg_rat_l1m_l3m\n",
       "..         ...                                         ...\n",
       "71          71        BrokeProtocolAmount_avg_rat_l6m_l12m\n",
       "72          72     CanceledProtocolAmount_avg_rat_l6m_l12m\n",
       "73          73  FulledTotalProtocolAmount_avg_rat_l6m_l12m\n",
       "74          74         LiveProtocolAmount_avg_rat_l6m_l12m\n",
       "75          75        TotalProtocolAmount_avg_rat_l6m_l12m\n",
       "\n",
       "[76 rows x 2 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_vars2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>index</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>contactcode</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>BusinessUnitCode</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>AssetManagementCode</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>ReachStatusCode</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>59</td>\n",
       "      <td>CanceledProtocolCount_max_rat_l6m_l12m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>60</td>\n",
       "      <td>FullyPaidProtocolCount_max_rat_l6m_l12m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>61</td>\n",
       "      <td>LiveProtocolCount_max_rat_l6m_l12m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>62</td>\n",
       "      <td>NewProtocolCount_max_rat_l6m_l12m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>63</td>\n",
       "      <td>ProtocolAmount_max_rat_l6m_l12m</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>345 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Unnamed: 0                                        0\n",
       "0            0                                    index\n",
       "1            1                              contactcode\n",
       "2            2                         BusinessUnitCode\n",
       "3            3                      AssetManagementCode\n",
       "4            4                          ReachStatusCode\n",
       "..         ...                                      ...\n",
       "59          59   CanceledProtocolCount_max_rat_l6m_l12m\n",
       "60          60  FullyPaidProtocolCount_max_rat_l6m_l12m\n",
       "61          61       LiveProtocolCount_max_rat_l6m_l12m\n",
       "62          62        NewProtocolCount_max_rat_l6m_l12m\n",
       "63          63          ProtocolAmount_max_rat_l6m_l12m\n",
       "\n",
       "[345 rows x 2 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_vars=pd.concat([model_vars1,model_vars2,model_vars3,model_vars4])\n",
    "\n",
    "model_vars"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>contactcode</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>BusinessUnitCode</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>AssetManagementCode</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>ReachStatusCode</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>FinancialStatusCode</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>59</td>\n",
       "      <td>CanceledProtocolCount_max_rat_l6m_l12m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>60</td>\n",
       "      <td>FullyPaidProtocolCount_max_rat_l6m_l12m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>61</td>\n",
       "      <td>LiveProtocolCount_max_rat_l6m_l12m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>62</td>\n",
       "      <td>NewProtocolCount_max_rat_l6m_l12m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>63</td>\n",
       "      <td>ProtocolAmount_max_rat_l6m_l12m</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>341 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Unnamed: 0                                        0\n",
       "1            1                              contactcode\n",
       "2            2                         BusinessUnitCode\n",
       "3            3                      AssetManagementCode\n",
       "4            4                          ReachStatusCode\n",
       "5            5                      FinancialStatusCode\n",
       "..         ...                                      ...\n",
       "59          59   CanceledProtocolCount_max_rat_l6m_l12m\n",
       "60          60  FullyPaidProtocolCount_max_rat_l6m_l12m\n",
       "61          61       LiveProtocolCount_max_rat_l6m_l12m\n",
       "62          62        NewProtocolCount_max_rat_l6m_l12m\n",
       "63          63          ProtocolAmount_max_rat_l6m_l12m\n",
       "\n",
       "[341 rows x 2 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_vars=model_vars.drop(model_vars.index[0])\n",
    "model_vars\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.DataFrame(model_vars).to_excel('ticari_model_FINAL_variables_before_shortlist_'+str(datetime.today().strftime(\"%Y_%m_%d\"))+'.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "varlist=model_vars[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "#data okuma:\n",
    "\n",
    "conn = pyodbc.connect('Driver={SQL Server};'\n",
    "                      'Server=DEVELOPMENT-01;'\n",
    "                      'Database=Erc_Project;'\n",
    "                      'Trusted_Connection=yes;')\n",
    "\n",
    "cursor = conn.cursor()\n",
    "\n",
    "data = pd.read_sql_query((\"\"\"SELECT  \n",
    "a.contactcode\n",
    ",a.refdate\n",
    ",a.target\n",
    ",BusinessUnitCode\n",
    ",AssetManagementCode\n",
    ",ReachStatusCode\n",
    ",FinancialStatusCode\n",
    ",FirstReachDate_monthdiff\n",
    ",FollowingStartDate_monthdiff\n",
    ",Sensibility\n",
    ",IsTCCitizen\n",
    ",ContactTypeCode\n",
    ",Age\n",
    ",GenderCode\n",
    ",MaritalStatusCode\n",
    ",CityCode\n",
    ",ExistingFlag\n",
    ",kefil_cnt\n",
    ",min_acqdate_open_diff\n",
    ",gsmsms_cnt\n",
    ",tcknsms_cnt\n",
    ",CustomerDifficulty\n",
    ",restate_haciz_cnt\n",
    ",restate_aktif_TenderPrice\n",
    ",restate_haciz_TenderPrice\n",
    ",restate_ipotek_TenderPrice\n",
    ",restate_pasif_TenderPrice\n",
    ",restate_aktif_MarketValue\n",
    ",restate_haciz_MarketValue\n",
    ",restate_pasif_MarketValue\n",
    ",ticari_arac_anlasma_cnt\n",
    ",ticari_arac_icra_tenderprice\n",
    ",otomobil_icra_tenderprice\n",
    ",ticari_arac_diger_tenderprice\n",
    ",otomobil_diger_tenderprice\n",
    ",ticari_arac_icra_NetPaymentAmount\n",
    ",ticari_arac_anlasma_MarketingValue\n",
    ",otomobil_anlasma_MarketingValue\n",
    ",ticari_arac_icra_MarketingValue\n",
    ",otomobil_icra_MarketingValue\n",
    ",ticari_arac_deger_yok_MarketingValue\n",
    ",otomobil_deger_yok_MarketingValue\n",
    ",motor_deger_yok_MarketingValue\n",
    ",diger_deger_yok_MarketingValue\n",
    ",ticari_arac_yakalama_MarketingValue\n",
    ",otomobil_yakalama_MarketingValue\n",
    ",diger_yakalama_MarketingValue\n",
    ",ticari_arac_diger_MarketingValue\n",
    ",otomobil_diger_MarketingValue\n",
    ",diger_MarketingValue\n",
    ",tah_icra_odemesi\n",
    ",tah_icra_satis\n",
    ",tah_icra_odemesi_avg_l3m\n",
    ",tah_icra_satis_avg_l3m\n",
    ",tah_diger_avg_l3m\n",
    ",outbound_call_cnt_max_l3m\n",
    ",tah_odeme_teklifi_min_l3m\n",
    ",tah_total_min_l3m\n",
    ",outbound_call_cnt_max_l6m\n",
    ",gsmsms_cnt_max_l6m\n",
    ",tah_icra_odemesi_max_l6m\n",
    ",tcknsms_cnt_min_l6m\n",
    ",IntAmount_UPB_rat_avg_l12m\n",
    ",sum_ExpenseAmount_avg_l12m\n",
    ",ExpenseAmount_UPB_rat_avg_l12m\n",
    ",tah_total_avg_l12m\n",
    ",Current_UPB_Debt_rat_min_l12m\n",
    ",tah_odeme_teklifi_min_l12m\n",
    ",Current_UPB_Debt_rat_max_l12m\n",
    ",outbound_call_cnt_max_l12m\n",
    ",gsmsms_cnt_max_l12m\n",
    ",tcknsms_cnt_max_l12m\n",
    ",tah_icra_odemesi_max_l12m\n",
    ",tah_diger_max_l12m\n",
    ",min_cutoffdate_diff\n",
    ",acq_tot_debt\n",
    ",min_noticedate_diff\n",
    ",bankcode_cnt\n",
    ",AcqPaymentTRY\n",
    ",loantype1_cnt\n",
    ",loantype2_cnt\n",
    ",loantype3_cnt\n",
    ",loantype4_cnt\n",
    ",loantype5_cnt\n",
    ",loantype6_cnt\n",
    ",loantype7_cnt\n",
    ",loantype8_cnt\n",
    ",mirasci_flg\n",
    ",call_duration\n",
    ",first_call_diff\n",
    ",KKBbankaTSmonth\n",
    ",MaxÜrünKapatmaTarihi\n",
    ",xDevirBakiye\n",
    ",MaxVYSKapatmaTarihi_diff\n",
    ",ToplamMemzuc\n",
    ",ProtocolCount\n",
    ",ProtocolAmount\n",
    ",ActivatedProtocolAmount\n",
    ",BrokeProtocolAmount\n",
    ",CanceledProtocolAmount\n",
    ",LiveProtocolAmount\n",
    ",TotalProtocolAmount\n",
    ",masraf_tutari\n",
    ",meslek_L\n",
    ",tenure_open\n",
    ",ProtocolCount_min_l3m\n",
    ",BrokeProtocolAmount_min_l3m\n",
    ",ProtocolAmount_min_l6m\n",
    ",ActivatedProtocolAmount_min_l6m\n",
    ",BrokeProtocolAmount_min_l6m\n",
    ",CanceledProtocolAmount_min_l6m\n",
    ",LiveProtocolAmount_avg_l6m\n",
    ",LiveProtocolCount_max_l6m\n",
    ",FulledTotalProtocolAmount_max_l6m\n",
    ",TotalProtocolAmount_max_l6m\n",
    ",BrokeProtocolAmount_min_l12m\n",
    ",TotalProtocolAmount_min_l12m\n",
    ",ProtocolAmount_avg_l12m\n",
    ",CanceledProtocolAmount_avg_l12m\n",
    ",LiveProtocolCount_max_l12m\n",
    ",ActivatedProtocolAmount_max_l12m\n",
    ",LiveProtocolAmount_max_l12m\n",
    ",Sensibility_avg_rat_l1m_l3m\n",
    ",Current_UPB_Debt_rat_avg_rat_l1m_l3m\n",
    ",ExpenseAmount_Debt_rat_avg_rat_l1m_l3m\n",
    ",sum_CurrentDebt_avg_rat_l1m_l3m\n",
    ",Inbound_call_20_cnt_avg_rat_l1m_l3m\n",
    ",Inbound_call_cnt_avg_rat_l1m_l3m\n",
    ",Manuel_call_20_cnt_avg_rat_l1m_l3m\n",
    ",Manuel_call_cnt_avg_rat_l1m_l3m\n",
    ",SalaryConfiscationFlag_avg_rat_l1m_l3m\n",
    ",tah_icra_satis_avg_rat_l1m_l3m\n",
    ",ActivatedProtocolCount_avg_rat_l1m_l3m\n",
    ",LiveProtocolAmount_avg_rat_l1m_l3m\n",
    ",tcknsms_cnt_avg_rat_l1m_l6m\n",
    ",tah_icra_satis_avg_rat_l1m_l6m\n",
    ",ActivatedProtocolCount_avg_rat_l1m_l6m\n",
    ",BrokeProtocolCount_avg_rat_l1m_l6m\n",
    ",ActivatedProtocolAmount_avg_rat_l1m_l6m\n",
    ",outbound_call_20_cnt_avg_rat_l3m_l6m\n",
    ",Inbound_call_20_cnt_avg_rat_l3m_l6m\n",
    ",Inbound_call_cnt_avg_rat_l3m_l6m\n",
    ",Manuel_call_20_cnt_avg_rat_l3m_l6m\n",
    ",Manuel_call_cnt_avg_rat_l3m_l6m\n",
    ",gsmsms_cnt_avg_rat_l3m_l6m\n",
    ",tah_icra_satis_avg_rat_l3m_l6m\n",
    ",ActivatedProtocolCount_avg_rat_l3m_l6m\n",
    ",BrokeProtocolCount_avg_rat_l3m_l6m\n",
    ",LiveProtocolAmount_avg_rat_l3m_l6m\n",
    ",outbound_call_cnt_avg_rat_l1m_l12m\n",
    ",gsmsms_cnt_avg_rat_l1m_l12m\n",
    ",tah_diger_avg_rat_l1m_l12m\n",
    ",ActivatedProtocolCount_avg_rat_l1m_l12m\n",
    ",FullyPaidProtocolCount_avg_rat_l1m_l12m\n",
    ",LiveProtocolCount_avg_rat_l1m_l12m\n",
    ",ProtocolAmount_avg_rat_l1m_l12m\n",
    ",ActivatedProtocolAmount_avg_rat_l1m_l12m\n",
    ",BrokeProtocolAmount_avg_rat_l1m_l12m\n",
    ",CanceledProtocolAmount_avg_rat_l1m_l12m\n",
    ",FulledTotalProtocolAmount_avg_rat_l1m_l12m\n",
    ",TotalProtocolAmount_avg_rat_l1m_l12m\n",
    ",outbound_call_20_cnt_avg_rat_l3m_l12m\n",
    ",outbound_call_cnt_avg_rat_l3m_l12m\n",
    ",tah_odeme_teklifi_avg_rat_l3m_l12m\n",
    ",ActivatedProtocolCount_avg_rat_l3m_l12m\n",
    ",CanceledProtocolCount_avg_rat_l3m_l12m\n",
    ",FullyPaidProtocolCount_avg_rat_l3m_l12m\n",
    ",ProtocolAmount_avg_rat_l3m_l12m\n",
    ",BrokeProtocolAmount_avg_rat_l3m_l12m\n",
    ",CanceledProtocolAmount_avg_rat_l3m_l12m\n",
    ",FulledTotalProtocolAmount_avg_rat_l3m_l12m\n",
    ",TotalProtocolAmount_avg_rat_l3m_l12m\n",
    ",sum_CurrentUPB_avg_rat_l6m_l12m\n",
    ",IntAmount_Debt_rat_avg_rat_l6m_l12m\n",
    ",outbound_call_cnt_avg_rat_l6m_l12m\n",
    ",Inbound_call_20_cnt_avg_rat_l6m_l12m\n",
    ",Inbound_call_cnt_avg_rat_l6m_l12m\n",
    ",Manuel_call_20_cnt_avg_rat_l6m_l12m\n",
    ",Manuel_call_cnt_avg_rat_l6m_l12m\n",
    ",tcknsms_cnt_avg_rat_l6m_l12m\n",
    ",tah_icra_odemesi_Debt_rat_avg_rat_l6m_l12m\n",
    ",tah_icra_satis_avg_rat_l6m_l12m\n",
    ",tah_diger_avg_rat_l6m_l12m\n",
    ",tah_diger_Debt_rat_avg_rat_l6m_l12m\n",
    ",BrokeProtocolCount_avg_rat_l6m_l12m\n",
    ",CanceledProtocolCount_avg_rat_l6m_l12m\n",
    ",FullyPaidProtocolCount_avg_rat_l6m_l12m\n",
    ",LiveProtocolCount_avg_rat_l6m_l12m\n",
    ",NewProtocolCount_avg_rat_l6m_l12m\n",
    ",ProtocolAmount_avg_rat_l6m_l12m\n",
    ",ActivatedProtocolAmount_avg_rat_l6m_l12m\n",
    ",BrokeProtocolAmount_avg_rat_l6m_l12m\n",
    ",CanceledProtocolAmount_avg_rat_l6m_l12m\n",
    ",FulledTotalProtocolAmount_avg_rat_l6m_l12m\n",
    ",LiveProtocolAmount_avg_rat_l6m_l12m\n",
    ",TotalProtocolAmount_avg_rat_l6m_l12m\n",
    ",Sensibility_min_rat_l1m_l3m\n",
    ",Current_UPB_Debt_rat_min_rat_l1m_l3m\n",
    ",ExpenseAmount_Debt_rat_min_rat_l1m_l3m\n",
    ",sum_CurrentDebt_min_rat_l1m_l3m\n",
    ",outbound_call_20_cnt_min_rat_l1m_l3m\n",
    ",Inbound_call_20_cnt_min_rat_l1m_l3m\n",
    ",Inbound_call_cnt_min_rat_l1m_l3m\n",
    ",Manuel_call_20_cnt_min_rat_l1m_l3m\n",
    ",Manuel_call_cnt_min_rat_l1m_l3m\n",
    ",gsmsms_cnt_min_rat_l1m_l3m\n",
    ",tcknsms_cnt_min_rat_l1m_l3m\n",
    ",SalaryConfiscationFlag_min_rat_l1m_l3m\n",
    ",tah_diger_min_rat_l1m_l3m\n",
    ",ActivatedProtocolCount_min_rat_l1m_l3m\n",
    ",BrokeProtocolCount_min_rat_l1m_l3m\n",
    ",BrokeProtocolAmount_min_rat_l1m_l3m\n",
    ",LiveProtocolAmount_min_rat_l1m_l3m\n",
    ",Manuel_call_20_cnt_min_rat_l1m_l6m\n",
    ",Manuel_call_cnt_min_rat_l1m_l6m\n",
    ",tah_diger_min_rat_l1m_l6m\n",
    ",ProtocolCount_min_rat_l1m_l6m\n",
    ",ActivatedProtocolCount_min_rat_l1m_l6m\n",
    ",BrokeProtocolCount_min_rat_l1m_l6m\n",
    ",FullyPaidProtocolCount_min_rat_l1m_l6m\n",
    ",ActivatedProtocolAmount_min_rat_l1m_l6m\n",
    ",outbound_call_20_cnt_min_rat_l3m_l6m\n",
    ",Inbound_call_20_cnt_min_rat_l3m_l6m\n",
    ",Inbound_call_cnt_min_rat_l3m_l6m\n",
    ",Manuel_call_20_cnt_min_rat_l3m_l6m\n",
    ",Manuel_call_cnt_min_rat_l3m_l6m\n",
    ",tah_icra_satis_min_rat_l3m_l6m\n",
    ",tah_diger_min_rat_l3m_l6m\n",
    ",ActivatedProtocolCount_min_rat_l3m_l6m\n",
    ",BrokeProtocolCount_min_rat_l3m_l6m\n",
    ",BrokeProtocolAmount_min_rat_l3m_l6m\n",
    ",sum_CurrentUPB_min_rat_l1m_l12m\n",
    ",outbound_call_20_cnt_min_rat_l1m_l12m\n",
    ",outbound_call_cnt_min_rat_l1m_l12m\n",
    ",Manuel_call_20_cnt_min_rat_l1m_l12m\n",
    ",Manuel_call_cnt_min_rat_l1m_l12m\n",
    ",tah_icra_odemesi_Debt_rat_min_rat_l1m_l12m\n",
    ",tah_diger_min_rat_l1m_l12m\n",
    ",ActivatedProtocolCount_min_rat_l1m_l12m\n",
    ",CanceledProtocolCount_min_rat_l1m_l12m\n",
    ",FullyPaidProtocolCount_min_rat_l1m_l12m\n",
    ",LiveProtocolCount_min_rat_l1m_l12m\n",
    ",ActivatedProtocolAmount_min_rat_l1m_l12m\n",
    ",CanceledProtocolAmount_min_rat_l1m_l12m\n",
    ",FulledTotalProtocolAmount_min_rat_l1m_l12m\n",
    ",TotalProtocolAmount_min_rat_l1m_l12m\n",
    ",Inbound_call_20_cnt_min_rat_l3m_l12m\n",
    ",Inbound_call_cnt_min_rat_l3m_l12m\n",
    ",Manuel_call_20_cnt_min_rat_l3m_l12m\n",
    ",Manuel_call_cnt_min_rat_l3m_l12m\n",
    ",gsmsms_cnt_min_rat_l3m_l12m\n",
    ",tah_icra_satis_min_rat_l3m_l12m\n",
    ",tah_odeme_teklifi_min_rat_l3m_l12m\n",
    ",tah_total_min_rat_l3m_l12m\n",
    ",ActivatedProtocolCount_min_rat_l3m_l12m\n",
    ",CanceledProtocolCount_min_rat_l3m_l12m\n",
    ",FullyPaidProtocolCount_min_rat_l3m_l12m\n",
    ",ProtocolAmount_min_rat_l3m_l12m\n",
    ",CanceledProtocolAmount_min_rat_l3m_l12m\n",
    ",FulledTotalProtocolAmount_min_rat_l3m_l12m\n",
    ",LiveProtocolAmount_min_rat_l3m_l12m\n",
    ",TotalProtocolAmount_min_rat_l3m_l12m\n",
    ",sum_IntAmount_min_rat_l6m_l12m\n",
    ",IntAmount_UPB_rat_min_rat_l6m_l12m\n",
    ",outbound_call_cnt_min_rat_l6m_l12m\n",
    ",tcknsms_cnt_min_rat_l6m_l12m\n",
    ",tah_icra_satis_min_rat_l6m_l12m\n",
    ",tah_diger_min_rat_l6m_l12m\n",
    ",CanceledProtocolCount_min_rat_l6m_l12m\n",
    ",FullyPaidProtocolCount_min_rat_l6m_l12m\n",
    ",LiveProtocolCount_min_rat_l6m_l12m\n",
    ",ProtocolAmount_min_rat_l6m_l12m\n",
    ",ActivatedProtocolAmount_min_rat_l6m_l12m\n",
    ",BrokeProtocolAmount_min_rat_l6m_l12m\n",
    ",CanceledProtocolAmount_min_rat_l6m_l12m\n",
    ",FulledTotalProtocolAmount_min_rat_l6m_l12m\n",
    ",LiveProtocolAmount_min_rat_l6m_l12m\n",
    ",TotalProtocolAmount_min_rat_l6m_l12m\n",
    ",Sensibility_max_rat_l1m_l3m\n",
    ",Current_UPB_Debt_rat_max_rat_l1m_l3m\n",
    ",outbound_call_cnt_max_rat_l1m_l3m\n",
    ",Inbound_call_20_cnt_max_rat_l1m_l3m\n",
    ",Manuel_call_20_cnt_max_rat_l1m_l3m\n",
    ",Manuel_call_cnt_max_rat_l1m_l3m\n",
    ",gsmsms_cnt_max_rat_l1m_l3m\n",
    ",tcknsms_cnt_max_rat_l1m_l3m\n",
    ",SalaryConfiscationFlag_max_rat_l1m_l3m\n",
    ",tah_icra_satis_max_rat_l1m_l3m\n",
    ",tah_odeme_teklifi_UPB_rat_max_rat_l1m_l3m\n",
    ",ActivatedProtocolAmount_max_rat_l1m_l3m\n",
    ",LiveProtocolAmount_max_rat_l1m_l3m\n",
    ",Current_UPB_Debt_rat_max_rat_l1m_l6m\n",
    ",tah_icra_satis_max_rat_l1m_l6m\n",
    ",BrokeProtocolCount_max_rat_l1m_l6m\n",
    ",ActivatedProtocolAmount_max_rat_l1m_l6m\n",
    ",outbound_call_20_cnt_max_rat_l3m_l6m\n",
    ",outbound_call_cnt_max_rat_l3m_l6m\n",
    ",Inbound_call_20_cnt_max_rat_l3m_l6m\n",
    ",Inbound_call_cnt_max_rat_l3m_l6m\n",
    ",Manuel_call_20_cnt_max_rat_l3m_l6m\n",
    ",Manuel_call_cnt_max_rat_l3m_l6m\n",
    ",gsmsms_cnt_max_rat_l3m_l6m\n",
    ",tah_odeme_teklifi_max_rat_l3m_l6m\n",
    ",tah_total_max_rat_l3m_l6m\n",
    ",sum_CurrentUPB_max_rat_l1m_l12m\n",
    ",Current_UPB_Debt_rat_max_rat_l1m_l12m\n",
    ",sum_IntAmount_max_rat_l1m_l12m\n",
    ",sum_ExpenseAmount_max_rat_l1m_l12m\n",
    ",sum_CurrentDebt_max_rat_l1m_l12m\n",
    ",tah_diger_max_rat_l1m_l12m\n",
    ",ActivatedProtocolCount_max_rat_l1m_l12m\n",
    ",CanceledProtocolCount_max_rat_l1m_l12m\n",
    ",FullyPaidProtocolCount_max_rat_l1m_l12m\n",
    ",LiveProtocolCount_max_rat_l1m_l12m\n",
    ",NewProtocolCount_max_rat_l1m_l12m\n",
    ",ProtocolAmount_max_rat_l1m_l12m\n",
    ",ActivatedProtocolAmount_max_rat_l1m_l12m\n",
    ",TotalProtocolAmount_max_rat_l1m_l12m\n",
    ",tcknsms_cnt_max_rat_l3m_l12m\n",
    ",BrokeProtocolCount_max_rat_l3m_l12m\n",
    ",CanceledProtocolCount_max_rat_l3m_l12m\n",
    ",FullyPaidProtocolCount_max_rat_l3m_l12m\n",
    ",ProtocolAmount_max_rat_l3m_l12m\n",
    ",Current_UPB_Debt_rat_max_rat_l6m_l12m\n",
    ",ExpenseAmount_Debt_rat_max_rat_l6m_l12m\n",
    ",outbound_call_cnt_max_rat_l6m_l12m\n",
    ",Inbound_call_20_cnt_max_rat_l6m_l12m\n",
    ",Inbound_call_cnt_max_rat_l6m_l12m\n",
    ",Manuel_call_20_cnt_max_rat_l6m_l12m\n",
    ",Manuel_call_cnt_max_rat_l6m_l12m\n",
    ",tah_icra_odemesi_Debt_rat_max_rat_l6m_l12m\n",
    ",tah_icra_satis_max_rat_l6m_l12m\n",
    ",tah_diger_max_rat_l6m_l12m\n",
    ",ActivatedProtocolCount_max_rat_l6m_l12m\n",
    ",BrokeProtocolCount_max_rat_l6m_l12m\n",
    ",CanceledProtocolCount_max_rat_l6m_l12m\n",
    ",FullyPaidProtocolCount_max_rat_l6m_l12m\n",
    ",LiveProtocolCount_max_rat_l6m_l12m\n",
    ",NewProtocolCount_max_rat_l6m_l12m\n",
    ",ProtocolAmount_max_rat_l6m_l12m\n",
    "\n",
    "\n",
    "    FROM [Erc_Project].[exp].[ticari_vars_target] a\n",
    "    left join [Erc_Project].[exp].[ticari_ratio_vars_avg] b on a.contactcode=b.contactcode and a.refdate=b.refdate \n",
    "    left join [Erc_Project].[exp].[ticari_ratio_vars_min] c on a.contactcode=c.contactcode and a.refdate=c.refdate\n",
    "    left join [Erc_Project].[exp].[ticari_ratio_vars_max] d on a.contactcode=d.contactcode and a.refdate=d.refdate\n",
    "    \"\"\"), conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>Unique Number</th>\n",
       "      <th>Values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>contactcode</td>\n",
       "      <td>45502</td>\n",
       "      <td>[10013279, 10015500, 10021047, 10046577, 10116...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>refdate</td>\n",
       "      <td>35</td>\n",
       "      <td>[2018-12-31, 2018-11-30, 2019-03-31, 2019-01-3...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>target</td>\n",
       "      <td>2</td>\n",
       "      <td>[0, 1]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>BusinessUnitCode</td>\n",
       "      <td>5</td>\n",
       "      <td>[21, 12, 22, 20, 29]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AssetManagementCode</td>\n",
       "      <td>95</td>\n",
       "      <td>[23, 5580, 5688, 2035, 6482, 9030, 1202, 5643,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>335</th>\n",
       "      <td>CanceledProtocolCount_max_rat_l6m_l12m</td>\n",
       "      <td>3</td>\n",
       "      <td>[-999.0, nan, 1.0, 0.0]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>336</th>\n",
       "      <td>FullyPaidProtocolCount_max_rat_l6m_l12m</td>\n",
       "      <td>3</td>\n",
       "      <td>[-999.0, 1.0, 0.0, nan]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>337</th>\n",
       "      <td>LiveProtocolCount_max_rat_l6m_l12m</td>\n",
       "      <td>3</td>\n",
       "      <td>[-999.0, 0.0, nan, 1.0]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>338</th>\n",
       "      <td>NewProtocolCount_max_rat_l6m_l12m</td>\n",
       "      <td>3</td>\n",
       "      <td>[-999.0, 0.0, 1.0, nan]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>339</th>\n",
       "      <td>ProtocolAmount_max_rat_l6m_l12m</td>\n",
       "      <td>156</td>\n",
       "      <td>[-999.0, 1.0, nan, 0.051603, 0.951853, 0.55021...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>340 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                    Features  Unique Number  \\\n",
       "0                                contactcode          45502   \n",
       "1                                    refdate             35   \n",
       "2                                     target              2   \n",
       "3                           BusinessUnitCode              5   \n",
       "4                        AssetManagementCode             95   \n",
       "..                                       ...            ...   \n",
       "335   CanceledProtocolCount_max_rat_l6m_l12m              3   \n",
       "336  FullyPaidProtocolCount_max_rat_l6m_l12m              3   \n",
       "337       LiveProtocolCount_max_rat_l6m_l12m              3   \n",
       "338        NewProtocolCount_max_rat_l6m_l12m              3   \n",
       "339          ProtocolAmount_max_rat_l6m_l12m            156   \n",
       "\n",
       "                                                Values  \n",
       "0    [10013279, 10015500, 10021047, 10046577, 10116...  \n",
       "1    [2018-12-31, 2018-11-30, 2019-03-31, 2019-01-3...  \n",
       "2                                               [0, 1]  \n",
       "3                                 [21, 12, 22, 20, 29]  \n",
       "4    [23, 5580, 5688, 2035, 6482, 9030, 1202, 5643,...  \n",
       "..                                                 ...  \n",
       "335                            [-999.0, nan, 1.0, 0.0]  \n",
       "336                            [-999.0, 1.0, 0.0, nan]  \n",
       "337                            [-999.0, 0.0, nan, 1.0]  \n",
       "338                            [-999.0, 0.0, 1.0, nan]  \n",
       "339  [-999.0, 1.0, nan, 0.051603, 0.951853, 0.55021...  \n",
       "\n",
       "[340 rows x 3 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#değişkenlerin içeriklerini gösterir:\n",
    "attFeatures = []\n",
    "for i in data.columns:\n",
    "    attFeatures.append([i, data[i].nunique(), data[i].drop_duplicates().values])\n",
    "pd.DataFrame(attFeatures, columns = ['Features', 'Unique Number', 'Values'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "17:13:32\n",
      "02_06_2022\n"
     ]
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "\n",
    "print(datetime.now().strftime(\"%H:%M:%S\"))\n",
    "print(datetime.today().strftime(\"%d_%m_%Y\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "#değişkenlerin içeriklerini gösterir:\n",
    "xxx=pd.DataFrame(attFeatures, columns = ['Features', 'Unique Number', 'Values'])\n",
    "xxx.to_excel('Ticari_FINAL_Feature_details_'+str(datetime.today().strftime(\"%Y_%m_%d\"))+'.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = data.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df1['IsSalaryDeduction']=np.where(df1['IsSalaryDeduction']=='True',1,np.where(df1['IsSalaryDeduction']=='False',0,-999))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df1['IsTCCitizen']=np.where(df1['IsTCCitizen']=='True',1,np.where(df1['IsTCCitizen']=='False',0,-999))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df1 = df1.drop(columns=['CityName','Region','BirthPlace'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df1['CityCode'] = df1['CityCode'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ReachStatusCode                             2102\n",
       "FinancialStatusCode                        14614\n",
       "FirstReachDate_monthdiff                   14591\n",
       "FollowingStartDate_monthdiff               53453\n",
       "Sensibility                                 5496\n",
       "                                           ...  \n",
       "CanceledProtocolCount_max_rat_l6m_l12m       533\n",
       "FullyPaidProtocolCount_max_rat_l6m_l12m       99\n",
       "LiveProtocolCount_max_rat_l6m_l12m            92\n",
       "NewProtocolCount_max_rat_l6m_l12m            268\n",
       "ProtocolAmount_max_rat_l6m_l12m              799\n",
       "Length: 293, dtype: int64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# missing values count:\n",
    "missing = df1.isnull().sum()\n",
    "missing = missing[missing>0]\n",
    "missing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1.reset_index(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>contactcode</th>\n",
       "      <th>refdate</th>\n",
       "      <th>target</th>\n",
       "      <th>BusinessUnitCode</th>\n",
       "      <th>AssetManagementCode</th>\n",
       "      <th>ReachStatusCode</th>\n",
       "      <th>FinancialStatusCode</th>\n",
       "      <th>FirstReachDate_monthdiff</th>\n",
       "      <th>FollowingStartDate_monthdiff</th>\n",
       "      <th>...</th>\n",
       "      <th>tah_icra_odemesi_Debt_rat_max_rat_l6m_l12m</th>\n",
       "      <th>tah_icra_satis_max_rat_l6m_l12m</th>\n",
       "      <th>tah_diger_max_rat_l6m_l12m</th>\n",
       "      <th>ActivatedProtocolCount_max_rat_l6m_l12m</th>\n",
       "      <th>BrokeProtocolCount_max_rat_l6m_l12m</th>\n",
       "      <th>CanceledProtocolCount_max_rat_l6m_l12m</th>\n",
       "      <th>FullyPaidProtocolCount_max_rat_l6m_l12m</th>\n",
       "      <th>LiveProtocolCount_max_rat_l6m_l12m</th>\n",
       "      <th>NewProtocolCount_max_rat_l6m_l12m</th>\n",
       "      <th>ProtocolAmount_max_rat_l6m_l12m</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>10013279</td>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>23</td>\n",
       "      <td>3.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>10015500</td>\n",
       "      <td>2018-11-30</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>23</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>10021047</td>\n",
       "      <td>2019-03-31</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>5580</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>10046577</td>\n",
       "      <td>2019-01-31</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>23</td>\n",
       "      <td>3.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>10116250</td>\n",
       "      <td>2020-10-31</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>23</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 341 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   index contactcode     refdate  target  BusinessUnitCode  \\\n",
       "0      0    10013279  2018-12-31       0                21   \n",
       "1      1    10015500  2018-11-30       0                12   \n",
       "2      2    10021047  2019-03-31       0                21   \n",
       "3      3    10046577  2019-01-31       1                22   \n",
       "4      4    10116250  2020-10-31       0                20   \n",
       "\n",
       "   AssetManagementCode  ReachStatusCode  FinancialStatusCode  \\\n",
       "0                   23              3.0                 19.0   \n",
       "1                   23              1.0                  NaN   \n",
       "2                 5580              1.0                  NaN   \n",
       "3                   23              3.0                 19.0   \n",
       "4                   23              3.0                  1.0   \n",
       "\n",
       "   FirstReachDate_monthdiff  FollowingStartDate_monthdiff  ...  \\\n",
       "0                       7.0                           NaN  ...   \n",
       "1                       NaN                           NaN  ...   \n",
       "2                       NaN                           NaN  ...   \n",
       "3                       8.0                           NaN  ...   \n",
       "4                      72.0                           NaN  ...   \n",
       "\n",
       "   tah_icra_odemesi_Debt_rat_max_rat_l6m_l12m  \\\n",
       "0                                      -999.0   \n",
       "1                                      -999.0   \n",
       "2                                      -999.0   \n",
       "3                                      -999.0   \n",
       "4                                      -999.0   \n",
       "\n",
       "   tah_icra_satis_max_rat_l6m_l12m  tah_diger_max_rat_l6m_l12m  \\\n",
       "0                           -999.0                      -999.0   \n",
       "1                           -999.0                      -999.0   \n",
       "2                           -999.0                      -999.0   \n",
       "3                           -999.0                      -999.0   \n",
       "4                           -999.0                      -999.0   \n",
       "\n",
       "   ActivatedProtocolCount_max_rat_l6m_l12m  \\\n",
       "0                                   -999.0   \n",
       "1                                   -999.0   \n",
       "2                                   -999.0   \n",
       "3                                   -999.0   \n",
       "4                                   -999.0   \n",
       "\n",
       "   BrokeProtocolCount_max_rat_l6m_l12m  \\\n",
       "0                               -999.0   \n",
       "1                               -999.0   \n",
       "2                               -999.0   \n",
       "3                               -999.0   \n",
       "4                               -999.0   \n",
       "\n",
       "   CanceledProtocolCount_max_rat_l6m_l12m  \\\n",
       "0                                  -999.0   \n",
       "1                                  -999.0   \n",
       "2                                  -999.0   \n",
       "3                                  -999.0   \n",
       "4                                  -999.0   \n",
       "\n",
       "   FullyPaidProtocolCount_max_rat_l6m_l12m  \\\n",
       "0                                   -999.0   \n",
       "1                                   -999.0   \n",
       "2                                   -999.0   \n",
       "3                                   -999.0   \n",
       "4                                   -999.0   \n",
       "\n",
       "   LiveProtocolCount_max_rat_l6m_l12m  NewProtocolCount_max_rat_l6m_l12m  \\\n",
       "0                              -999.0                             -999.0   \n",
       "1                              -999.0                             -999.0   \n",
       "2                              -999.0                             -999.0   \n",
       "3                              -999.0                             -999.0   \n",
       "4                              -999.0                             -999.0   \n",
       "\n",
       "   ProtocolAmount_max_rat_l6m_l12m  \n",
       "0                           -999.0  \n",
       "1                           -999.0  \n",
       "2                           -999.0  \n",
       "3                           -999.0  \n",
       "4                           -999.0  \n",
       "\n",
       "[5 rows x 341 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#manuel kolon silme:\n",
    "#df1 = df1.drop(columns=['contacttype_seg'])\n",
    "#df1 = df1.drop(columns=['ContactTypeName'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "#dften target silme, y=target oluşturma:\n",
    "X_new = df1.drop(['target'],axis=1)\n",
    "y_new = df1['target']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "#min date ile oot ayırma:\n",
    "#ardından train-test ayrılır:\n",
    "min_date = '2021-01-01'\n",
    "oot_index = X_new.loc[X_new['refdate'] >= min_date].index.values\n",
    "dev_index = X_new.loc[X_new['refdate'] < min_date].index.values  \n",
    "\n",
    "X_new = X_new.drop(columns=['refdate'])\n",
    "\n",
    "X_dev = X_new.iloc[dev_index]\n",
    "y_dev = y_new.iloc[dev_index]\n",
    "oot_x = X_new.iloc[oot_index]\n",
    "oot_y = y_new.iloc[oot_index]\n",
    "\n",
    "train_x, test_x, train_y, test_y = train_test_split(X_dev, y_dev, test_size=0.2, random_state=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_x_new = train_x.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "#tek değerli değişken silme:\n",
    "dc = drop_constant(train_x_new)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "250\n"
     ]
    }
   ],
   "source": [
    "#aynı tutulan kolonları tekilleştirme:\n",
    "ddc = drop_duplicate_columns(train_x_new,  dummy_columns_prefix='DMY_') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['contactcode']"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#data tipi obje olanları listeleme:\n",
    "k=[]\n",
    "for i in train_x_new.columns: \n",
    "    if(train_x_new[i].dtype == object):\n",
    "        k.append(i)\n",
    "k"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "#objeler string -999 ile, numerikler sayı -999 ile doldurulur:\n",
    "for i in range(len(k)):\n",
    "    train_x_new[k[i]].fillna('-999',inplace=True)\n",
    "    train_x_new[k[i]]=train_x_new[k[i]].replace([np.nan],'-999')\n",
    "    train_x_new[k[i]]=train_x_new[k[i]].replace([np.inf,-np.inf],'-999')\n",
    "    train_x_new[k[i]]=train_x_new[k[i]].replace([np.inf,-np.inf],'-999')\n",
    "    train_x_new[k[i]]=train_x_new[k[i]].astype(str)\n",
    "\n",
    "train_x_new.fillna(-999,inplace=True)\n",
    "train_x_new=train_x_new.replace([np.nan],-999)\n",
    "train_x_new=train_x_new.replace([np.inf,-np.inf],-999)\n",
    "train_x_new=train_x_new.replace([np.inf,-np.inf],-999)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['contactcode']"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#test datası aynı işlemler:\n",
    "#data tipi obje olanları listeleme:\n",
    "k=[]\n",
    "for i in test_x.columns: \n",
    "    if(test_x[i].dtype == object):\n",
    "        k.append(i)\n",
    "k"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\generic.py:6392: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return self._update_inplace(result)\n",
      "C:\\Users\\P-CEMR~1.KAS\\AppData\\Local\\Temp/ipykernel_5156/3853210864.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  test_x[k[i]]=test_x[k[i]].replace([np.nan],'-999')\n",
      "C:\\Users\\P-CEMR~1.KAS\\AppData\\Local\\Temp/ipykernel_5156/3853210864.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  test_x[k[i]]=test_x[k[i]].replace([np.inf,-np.inf],'-999')\n",
      "C:\\Users\\P-CEMR~1.KAS\\AppData\\Local\\Temp/ipykernel_5156/3853210864.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  test_x[k[i]]=test_x[k[i]].replace([np.inf,-np.inf],'-999')\n",
      "C:\\Users\\P-CEMR~1.KAS\\AppData\\Local\\Temp/ipykernel_5156/3853210864.py:8: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  test_x[k[i]]=test_x[k[i]].astype(str)\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py:5176: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().fillna(\n",
      "C:\\Users\\P-CEMR~1.KAS\\AppData\\Local\\Temp/ipykernel_5156/3853210864.py:18: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  oot_x[k[i]]=oot_x[k[i]].replace([np.nan],'-999')\n",
      "C:\\Users\\P-CEMR~1.KAS\\AppData\\Local\\Temp/ipykernel_5156/3853210864.py:19: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  oot_x[k[i]]=oot_x[k[i]].replace([np.inf,-np.inf],'-999')\n",
      "C:\\Users\\P-CEMR~1.KAS\\AppData\\Local\\Temp/ipykernel_5156/3853210864.py:20: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  oot_x[k[i]]=oot_x[k[i]].replace([np.inf,-np.inf],'-999')\n",
      "C:\\Users\\P-CEMR~1.KAS\\AppData\\Local\\Temp/ipykernel_5156/3853210864.py:21: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  oot_x[k[i]]=oot_x[k[i]].astype(str)\n"
     ]
    }
   ],
   "source": [
    "#test datası aynı işlemler:\n",
    "#objeler string 9999 ile, numerikler sayı 9999 ile doldurulur:\n",
    "for i in range(len(k)):\n",
    "    test_x[k[i]].fillna('-999',inplace=True)\n",
    "    test_x[k[i]]=test_x[k[i]].replace([np.nan],'-999')\n",
    "    test_x[k[i]]=test_x[k[i]].replace([np.inf,-np.inf],'-999')\n",
    "    test_x[k[i]]=test_x[k[i]].replace([np.inf,-np.inf],'-999')\n",
    "    test_x[k[i]]=test_x[k[i]].astype(str)\n",
    "\n",
    "test_x.fillna(-999,inplace=True)\n",
    "test_x=test_x.replace([np.nan],-999)\n",
    "test_x=test_x.replace([np.inf,-np.inf],-999)\n",
    "test_x=test_x.replace([np.inf,-np.inf],-999)\n",
    "\n",
    "#oot için aynı işlemler:\n",
    "for i in range(len(k)):\n",
    "    oot_x[k[i]].fillna('-999',inplace=True)\n",
    "    oot_x[k[i]]=oot_x[k[i]].replace([np.nan],'-999')\n",
    "    oot_x[k[i]]=oot_x[k[i]].replace([np.inf,-np.inf],'-999')\n",
    "    oot_x[k[i]]=oot_x[k[i]].replace([np.inf,-np.inf],'-999')\n",
    "    oot_x[k[i]]=oot_x[k[i]].astype(str)\n",
    "\n",
    "oot_x.fillna(-999,inplace=True)\n",
    "oot_x=oot_x.replace([np.nan],-999)\n",
    "oot_x=oot_x.replace([np.inf,-np.inf],-999)\n",
    "oot_x=oot_x.replace([np.inf,-np.inf],-999)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "start time:  17:15:06\n"
     ]
    }
   ],
   "source": [
    "print(\"start time: \",datetime.now().strftime(\"%H:%M:%S\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature Collinearity Elimination Progress: 40 / 46"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Index(['index', 'contactcode', 'BusinessUnitCode', 'AssetManagementCode',\n",
       "       'ReachStatusCode', 'FinancialStatusCode', 'FirstReachDate_monthdiff',\n",
       "       'FollowingStartDate_monthdiff', 'Sensibility', 'IsTCCitizen',\n",
       "       ...\n",
       "       'Inbound_call_cnt_max_rat_l6m_l12m',\n",
       "       'Manuel_call_20_cnt_max_rat_l6m_l12m',\n",
       "       'Manuel_call_cnt_max_rat_l6m_l12m', 'tah_diger_max_rat_l6m_l12m',\n",
       "       'ActivatedProtocolCount_max_rat_l6m_l12m',\n",
       "       'BrokeProtocolCount_max_rat_l6m_l12m',\n",
       "       'CanceledProtocolCount_max_rat_l6m_l12m',\n",
       "       'FullyPaidProtocolCount_max_rat_l6m_l12m',\n",
       "       'LiveProtocolCount_max_rat_l6m_l12m',\n",
       "       'NewProtocolCount_max_rat_l6m_l12m'],\n",
       "      dtype='object', length=235)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#corr elemesi:\n",
    "\n",
    "elc = eliminate_group_correlation(train_x_new, train_y, corrmat=None, threshold=0.8, seed=100) #136\n",
    "train_x_new.drop(elc, axis=1, inplace=True)\n",
    "train_x_new.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "end time:  17:17:48\n"
     ]
    }
   ],
   "source": [
    "print(\"end time: \",datetime.now().strftime(\"%H:%M:%S\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.DataFrame(train_x_new.columns).to_excel('ticari_model_FINAL_variables_'+str(datetime.today().strftime(\"%Y_%m_%d\"))+'.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>index</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>contactcode</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>BusinessUnitCode</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>AssetManagementCode</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>ReachStatusCode</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230</th>\n",
       "      <td>230</td>\n",
       "      <td>BrokeProtocolCount_max_rat_l6m_l12m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>231</td>\n",
       "      <td>CanceledProtocolCount_max_rat_l6m_l12m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>232</th>\n",
       "      <td>232</td>\n",
       "      <td>FullyPaidProtocolCount_max_rat_l6m_l12m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>233</th>\n",
       "      <td>233</td>\n",
       "      <td>LiveProtocolCount_max_rat_l6m_l12m</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>234</th>\n",
       "      <td>234</td>\n",
       "      <td>NewProtocolCount_max_rat_l6m_l12m</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>235 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Unnamed: 0                                        0\n",
       "0             0                                    index\n",
       "1             1                              contactcode\n",
       "2             2                         BusinessUnitCode\n",
       "3             3                      AssetManagementCode\n",
       "4             4                          ReachStatusCode\n",
       "..          ...                                      ...\n",
       "230         230      BrokeProtocolCount_max_rat_l6m_l12m\n",
       "231         231   CanceledProtocolCount_max_rat_l6m_l12m\n",
       "232         232  FullyPaidProtocolCount_max_rat_l6m_l12m\n",
       "233         233       LiveProtocolCount_max_rat_l6m_l12m\n",
       "234         234        NewProtocolCount_max_rat_l6m_l12m\n",
       "\n",
       "[235 rows x 2 columns]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_vars=pd.read_excel('ticari_model_FINAL_variables_'+str(datetime.today().strftime(\"%Y_%m_%d\"))+'.xlsx')\n",
    "model_vars"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>contactcode</th>\n",
       "      <th>BusinessUnitCode</th>\n",
       "      <th>AssetManagementCode</th>\n",
       "      <th>ReachStatusCode</th>\n",
       "      <th>FinancialStatusCode</th>\n",
       "      <th>FirstReachDate_monthdiff</th>\n",
       "      <th>FollowingStartDate_monthdiff</th>\n",
       "      <th>Sensibility</th>\n",
       "      <th>IsTCCitizen</th>\n",
       "      <th>...</th>\n",
       "      <th>Inbound_call_cnt_max_rat_l6m_l12m</th>\n",
       "      <th>Manuel_call_20_cnt_max_rat_l6m_l12m</th>\n",
       "      <th>Manuel_call_cnt_max_rat_l6m_l12m</th>\n",
       "      <th>tah_diger_max_rat_l6m_l12m</th>\n",
       "      <th>ActivatedProtocolCount_max_rat_l6m_l12m</th>\n",
       "      <th>BrokeProtocolCount_max_rat_l6m_l12m</th>\n",
       "      <th>CanceledProtocolCount_max_rat_l6m_l12m</th>\n",
       "      <th>FullyPaidProtocolCount_max_rat_l6m_l12m</th>\n",
       "      <th>LiveProtocolCount_max_rat_l6m_l12m</th>\n",
       "      <th>NewProtocolCount_max_rat_l6m_l12m</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>16645</th>\n",
       "      <td>16645</td>\n",
       "      <td>24272483</td>\n",
       "      <td>21</td>\n",
       "      <td>23</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37051</th>\n",
       "      <td>37051</td>\n",
       "      <td>62795499</td>\n",
       "      <td>21</td>\n",
       "      <td>23</td>\n",
       "      <td>1.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44532</th>\n",
       "      <td>44532</td>\n",
       "      <td>428134</td>\n",
       "      <td>22</td>\n",
       "      <td>23</td>\n",
       "      <td>2.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9902</th>\n",
       "      <td>9902</td>\n",
       "      <td>2132207</td>\n",
       "      <td>22</td>\n",
       "      <td>23</td>\n",
       "      <td>1.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43397</th>\n",
       "      <td>43397</td>\n",
       "      <td>68287</td>\n",
       "      <td>21</td>\n",
       "      <td>23</td>\n",
       "      <td>1.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 235 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       index contactcode  BusinessUnitCode  AssetManagementCode  \\\n",
       "16645  16645    24272483                21                   23   \n",
       "37051  37051    62795499                21                   23   \n",
       "44532  44532      428134                22                   23   \n",
       "9902    9902     2132207                22                   23   \n",
       "43397  43397       68287                21                   23   \n",
       "\n",
       "       ReachStatusCode  FinancialStatusCode  FirstReachDate_monthdiff  \\\n",
       "16645              1.0                  NaN                       NaN   \n",
       "37051              1.0                 19.0                      49.0   \n",
       "44532              2.0                 19.0                      58.0   \n",
       "9902               1.0                 19.0                      82.0   \n",
       "43397              1.0                 19.0                       NaN   \n",
       "\n",
       "       FollowingStartDate_monthdiff  Sensibility  IsTCCitizen  ...  \\\n",
       "16645                           NaN          0.0        False  ...   \n",
       "37051                           NaN          0.0        False  ...   \n",
       "44532                           NaN          0.0        False  ...   \n",
       "9902                            NaN          NaN        False  ...   \n",
       "43397                           NaN          NaN        False  ...   \n",
       "\n",
       "       Inbound_call_cnt_max_rat_l6m_l12m  Manuel_call_20_cnt_max_rat_l6m_l12m  \\\n",
       "16645                             -999.0                               -999.0   \n",
       "37051                             -999.0                               -999.0   \n",
       "44532                             -999.0                               -999.0   \n",
       "9902                              -999.0                               -999.0   \n",
       "43397                             -999.0                               -999.0   \n",
       "\n",
       "       Manuel_call_cnt_max_rat_l6m_l12m  tah_diger_max_rat_l6m_l12m  \\\n",
       "16645                            -999.0                      -999.0   \n",
       "37051                            -999.0                      -999.0   \n",
       "44532                            -999.0                      -999.0   \n",
       "9902                             -999.0                      -999.0   \n",
       "43397                            -999.0                      -999.0   \n",
       "\n",
       "       ActivatedProtocolCount_max_rat_l6m_l12m  \\\n",
       "16645                                   -999.0   \n",
       "37051                                   -999.0   \n",
       "44532                                   -999.0   \n",
       "9902                                    -999.0   \n",
       "43397                                   -999.0   \n",
       "\n",
       "       BrokeProtocolCount_max_rat_l6m_l12m  \\\n",
       "16645                               -999.0   \n",
       "37051                               -999.0   \n",
       "44532                               -999.0   \n",
       "9902                                -999.0   \n",
       "43397                               -999.0   \n",
       "\n",
       "       CanceledProtocolCount_max_rat_l6m_l12m  \\\n",
       "16645                                  -999.0   \n",
       "37051                                  -999.0   \n",
       "44532                                  -999.0   \n",
       "9902                                   -999.0   \n",
       "43397                                  -999.0   \n",
       "\n",
       "       FullyPaidProtocolCount_max_rat_l6m_l12m  \\\n",
       "16645                                   -999.0   \n",
       "37051                                   -999.0   \n",
       "44532                                   -999.0   \n",
       "9902                                    -999.0   \n",
       "43397                                   -999.0   \n",
       "\n",
       "       LiveProtocolCount_max_rat_l6m_l12m  NewProtocolCount_max_rat_l6m_l12m  \n",
       "16645                              -999.0                             -999.0  \n",
       "37051                              -999.0                             -999.0  \n",
       "44532                              -999.0                             -999.0  \n",
       "9902                               -999.0                             -999.0  \n",
       "43397                              -999.0                             -999.0  \n",
       "\n",
       "[5 rows x 235 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_x=train_x[model_vars[0]]\n",
    "train_x.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>contactcode</th>\n",
       "      <th>BusinessUnitCode</th>\n",
       "      <th>AssetManagementCode</th>\n",
       "      <th>ReachStatusCode</th>\n",
       "      <th>FinancialStatusCode</th>\n",
       "      <th>FirstReachDate_monthdiff</th>\n",
       "      <th>FollowingStartDate_monthdiff</th>\n",
       "      <th>Sensibility</th>\n",
       "      <th>IsTCCitizen</th>\n",
       "      <th>...</th>\n",
       "      <th>Inbound_call_cnt_max_rat_l6m_l12m</th>\n",
       "      <th>Manuel_call_20_cnt_max_rat_l6m_l12m</th>\n",
       "      <th>Manuel_call_cnt_max_rat_l6m_l12m</th>\n",
       "      <th>tah_diger_max_rat_l6m_l12m</th>\n",
       "      <th>ActivatedProtocolCount_max_rat_l6m_l12m</th>\n",
       "      <th>BrokeProtocolCount_max_rat_l6m_l12m</th>\n",
       "      <th>CanceledProtocolCount_max_rat_l6m_l12m</th>\n",
       "      <th>FullyPaidProtocolCount_max_rat_l6m_l12m</th>\n",
       "      <th>LiveProtocolCount_max_rat_l6m_l12m</th>\n",
       "      <th>NewProtocolCount_max_rat_l6m_l12m</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>16645</th>\n",
       "      <td>16645</td>\n",
       "      <td>24272483</td>\n",
       "      <td>21</td>\n",
       "      <td>23</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37051</th>\n",
       "      <td>37051</td>\n",
       "      <td>62795499</td>\n",
       "      <td>21</td>\n",
       "      <td>23</td>\n",
       "      <td>1.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44532</th>\n",
       "      <td>44532</td>\n",
       "      <td>428134</td>\n",
       "      <td>22</td>\n",
       "      <td>23</td>\n",
       "      <td>2.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9902</th>\n",
       "      <td>9902</td>\n",
       "      <td>2132207</td>\n",
       "      <td>22</td>\n",
       "      <td>23</td>\n",
       "      <td>1.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43397</th>\n",
       "      <td>43397</td>\n",
       "      <td>68287</td>\n",
       "      <td>21</td>\n",
       "      <td>23</td>\n",
       "      <td>1.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "      <td>-999.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 235 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       index contactcode  BusinessUnitCode  AssetManagementCode  \\\n",
       "16645  16645    24272483                21                   23   \n",
       "37051  37051    62795499                21                   23   \n",
       "44532  44532      428134                22                   23   \n",
       "9902    9902     2132207                22                   23   \n",
       "43397  43397       68287                21                   23   \n",
       "\n",
       "       ReachStatusCode  FinancialStatusCode  FirstReachDate_monthdiff  \\\n",
       "16645              1.0                  NaN                       NaN   \n",
       "37051              1.0                 19.0                      49.0   \n",
       "44532              2.0                 19.0                      58.0   \n",
       "9902               1.0                 19.0                      82.0   \n",
       "43397              1.0                 19.0                       NaN   \n",
       "\n",
       "       FollowingStartDate_monthdiff  Sensibility  IsTCCitizen  ...  \\\n",
       "16645                           NaN          0.0        False  ...   \n",
       "37051                           NaN          0.0        False  ...   \n",
       "44532                           NaN          0.0        False  ...   \n",
       "9902                            NaN          NaN        False  ...   \n",
       "43397                           NaN          NaN        False  ...   \n",
       "\n",
       "       Inbound_call_cnt_max_rat_l6m_l12m  Manuel_call_20_cnt_max_rat_l6m_l12m  \\\n",
       "16645                             -999.0                               -999.0   \n",
       "37051                             -999.0                               -999.0   \n",
       "44532                             -999.0                               -999.0   \n",
       "9902                              -999.0                               -999.0   \n",
       "43397                             -999.0                               -999.0   \n",
       "\n",
       "       Manuel_call_cnt_max_rat_l6m_l12m  tah_diger_max_rat_l6m_l12m  \\\n",
       "16645                            -999.0                      -999.0   \n",
       "37051                            -999.0                      -999.0   \n",
       "44532                            -999.0                      -999.0   \n",
       "9902                             -999.0                      -999.0   \n",
       "43397                            -999.0                      -999.0   \n",
       "\n",
       "       ActivatedProtocolCount_max_rat_l6m_l12m  \\\n",
       "16645                                   -999.0   \n",
       "37051                                   -999.0   \n",
       "44532                                   -999.0   \n",
       "9902                                    -999.0   \n",
       "43397                                   -999.0   \n",
       "\n",
       "       BrokeProtocolCount_max_rat_l6m_l12m  \\\n",
       "16645                               -999.0   \n",
       "37051                               -999.0   \n",
       "44532                               -999.0   \n",
       "9902                                -999.0   \n",
       "43397                               -999.0   \n",
       "\n",
       "       CanceledProtocolCount_max_rat_l6m_l12m  \\\n",
       "16645                                  -999.0   \n",
       "37051                                  -999.0   \n",
       "44532                                  -999.0   \n",
       "9902                                   -999.0   \n",
       "43397                                  -999.0   \n",
       "\n",
       "       FullyPaidProtocolCount_max_rat_l6m_l12m  \\\n",
       "16645                                   -999.0   \n",
       "37051                                   -999.0   \n",
       "44532                                   -999.0   \n",
       "9902                                    -999.0   \n",
       "43397                                   -999.0   \n",
       "\n",
       "       LiveProtocolCount_max_rat_l6m_l12m  NewProtocolCount_max_rat_l6m_l12m  \n",
       "16645                              -999.0                             -999.0  \n",
       "37051                              -999.0                             -999.0  \n",
       "44532                              -999.0                             -999.0  \n",
       "9902                               -999.0                             -999.0  \n",
       "43397                              -999.0                             -999.0  \n",
       "\n",
       "[5 rows x 235 columns]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_x.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>Unique Number</th>\n",
       "      <th>Values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>index</td>\n",
       "      <td>35629</td>\n",
       "      <td>[16645, 37051, 44532, 9902, 43397, 986, 15851,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>contactcode</td>\n",
       "      <td>31353</td>\n",
       "      <td>[24272483, 62795499, 428134, 2132207, 68287, 1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>BusinessUnitCode</td>\n",
       "      <td>5</td>\n",
       "      <td>[21, 22, 12, 20, 29]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AssetManagementCode</td>\n",
       "      <td>65</td>\n",
       "      <td>[23, 5580, 4016, 6482, 1202, 8420, 4417, 725, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ReachStatusCode</td>\n",
       "      <td>5</td>\n",
       "      <td>[1.0, 2.0, 3.0, 0.0, 4.0, nan]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>230</th>\n",
       "      <td>BrokeProtocolCount_max_rat_l6m_l12m</td>\n",
       "      <td>3</td>\n",
       "      <td>[-999.0, nan, 1.0, 0.0]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231</th>\n",
       "      <td>CanceledProtocolCount_max_rat_l6m_l12m</td>\n",
       "      <td>3</td>\n",
       "      <td>[-999.0, nan, 1.0, 0.0]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>232</th>\n",
       "      <td>FullyPaidProtocolCount_max_rat_l6m_l12m</td>\n",
       "      <td>3</td>\n",
       "      <td>[-999.0, nan, 1.0, 0.0]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>233</th>\n",
       "      <td>LiveProtocolCount_max_rat_l6m_l12m</td>\n",
       "      <td>3</td>\n",
       "      <td>[-999.0, 1.0, nan, 0.0]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>234</th>\n",
       "      <td>NewProtocolCount_max_rat_l6m_l12m</td>\n",
       "      <td>3</td>\n",
       "      <td>[-999.0, nan, 1.0, 0.0]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>235 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                    Features  Unique Number  \\\n",
       "0                                      index          35629   \n",
       "1                                contactcode          31353   \n",
       "2                           BusinessUnitCode              5   \n",
       "3                        AssetManagementCode             65   \n",
       "4                            ReachStatusCode              5   \n",
       "..                                       ...            ...   \n",
       "230      BrokeProtocolCount_max_rat_l6m_l12m              3   \n",
       "231   CanceledProtocolCount_max_rat_l6m_l12m              3   \n",
       "232  FullyPaidProtocolCount_max_rat_l6m_l12m              3   \n",
       "233       LiveProtocolCount_max_rat_l6m_l12m              3   \n",
       "234        NewProtocolCount_max_rat_l6m_l12m              3   \n",
       "\n",
       "                                                Values  \n",
       "0    [16645, 37051, 44532, 9902, 43397, 986, 15851,...  \n",
       "1    [24272483, 62795499, 428134, 2132207, 68287, 1...  \n",
       "2                                 [21, 22, 12, 20, 29]  \n",
       "3    [23, 5580, 4016, 6482, 1202, 8420, 4417, 725, ...  \n",
       "4                       [1.0, 2.0, 3.0, 0.0, 4.0, nan]  \n",
       "..                                                 ...  \n",
       "230                            [-999.0, nan, 1.0, 0.0]  \n",
       "231                            [-999.0, nan, 1.0, 0.0]  \n",
       "232                            [-999.0, nan, 1.0, 0.0]  \n",
       "233                            [-999.0, 1.0, nan, 0.0]  \n",
       "234                            [-999.0, nan, 1.0, 0.0]  \n",
       "\n",
       "[235 rows x 3 columns]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#değişkenlerin içeriklerini gösterir:\n",
    "attFeatures2 = []\n",
    "for i in train_x.columns:\n",
    "    attFeatures2.append([i, train_x[i].nunique(), train_x[i].drop_duplicates().values])\n",
    "pd.DataFrame(attFeatures2, columns = ['Features', 'Unique Number', 'Values'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.DataFrame(attFeatures2).to_excel('Ticari_train_FINAL_col_Details_'+str(datetime.today().strftime(\"%Y_%m_%d\"))+'.xlsx')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# aşağısı silinecek:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#alttaki iki kolon için refdateten fark hesaplanacak\n",
    "\n",
    "\n",
    "#import datetime\n",
    "#date1=data['RefDate'][0]\n",
    "#date2=str(data['min_acqdate_ever'][0])\n",
    "#mdate1 = datetime.datetime.strptime(date1, \"%Y-%m-%d\").date()\n",
    "#rdate1 = datetime.datetime.strptime(date2, \"%Y-%m-%d\").date()\n",
    "#delta =  (mdate1 - rdate1).days\n",
    "#print (delta)\n",
    "#train_x['min_acqdate_ever']\n",
    "#train_x['min_acqdate_open']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#elenecek değişkenleri listeler\n",
    "elimination_list = dc+ddc+elc\n",
    "elimination_list=pd.DataFrame(elimination_list)\n",
    "elimination_list['elimination'] = ''\n",
    "elimination_list['elimination'][:(len(dc)-1)]='Constant'\n",
    "elimination_list['elimination'][len(dc):(len(dc)+len(ddc)-1)]='Duplicate'\n",
    "elimination_list['elimination'][(len(dc)+len(ddc)):]='Correlation'\n",
    "\n",
    "#elenen değişkenler raporlanabilir\n",
    "elimination_list.to_excel('Ticari_elimination_list_'+str(datetime.today().strftime(\"%Y_%m_%d\"))+'.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#elenmesi istenmeyen ama elenen değişkenler mauel olarak eklenir:\n",
    "\n",
    "#train_x = pd.merge(train_x_new,train_x[['APP_ID',\n",
    "#'RT_KKB_CC_O_TOT_LIM',\n",
    "#'RT_KKB_CC_MAX_O_C_LIM_L1Y',\n",
    "#'RT_CUST_TENURE',\n",
    "#'RT_CRE_TENURE',\n",
    "#'RT_EDUCATION',\n",
    "#'RT_MMZC_TOT_CASH_LIM_LM',\n",
    "#'RT_KKB_OD_O_MAX_LIM',\n",
    "#'RT_KKB_O_TOT_CC_AMT',\n",
    "#'VAR21',\n",
    "#'RT_KKB_CC_2ND_MAX_O_C_LIM_L1Y',\n",
    "#'RT_KKB_CC_O_TOT_RISK',\n",
    "#'RT_KKB_INST_O_TOT_GPL_AMT',\n",
    "#'RT_KKB_OD_O_TOT_RISK',\n",
    "#'RT_KKB_SCORE',\n",
    "#'VAR20',\n",
    "#'VAR22',\n",
    "#'VAR23',\n",
    "#'VAR31',\n",
    "#'VAR68',\n",
    "#'VAR95'                                        \n",
    "#]],on='APP_ID', how='left')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#id kolonunu silme:\n",
    "#train_x = train_x.drop(columns=['APP_ID'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#train_x['IsSalaryDeduction']=np.where(train_x['IsSalaryDeduction']=='True',1,np.where(train_x['IsSalaryDeduction']=='False',0,-999))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#train_x['IsTCCitizen']=np.where(train_x['IsTCCitizen']=='True',1,np.where(train_x['IsTCCitizen']=='False',0,-999))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#test_x['IsSalaryDeduction']=np.where(test_x['IsSalaryDeduction']=='True',1,np.where(test_x['IsSalaryDeduction']=='False',0,-999))\n",
    "#oot_x['IsSalaryDeduction']=np.where(oot_x['IsSalaryDeduction']=='True',1,np.where(oot_x['IsSalaryDeduction']=='False',0,-999))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#test_x['IsTCCitizen']=np.where(test_x['IsTCCitizen']=='True',1,np.where(test_x['IsTCCitizen']=='False',0,-999))\n",
    "#oot_x['IsTCCitizen']=np.where(oot_x['IsTCCitizen']=='True',1,np.where(oot_x['IsTCCitizen']=='False',0,-999))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#train_x = train_x.drop(columns=['CityName','Region','BirthPlace'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#test_x = test_x.drop(columns=['CityName','Region','BirthPlace'])\n",
    "#oot_x = oot_x.drop(columns=['CityName','Region','BirthPlace'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#train_x['CityCode'] = train_x['CityCode'].astype(int)\n",
    "#test_x['CityCode'] = test_x['CityCode'].astype(int)\n",
    "#oot_x['CityCode'] = oot_x['CityCode'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#eklenen kolonlar olduğu için yeni obje gelenleri listeler:\n",
    "k=[]\n",
    "for i in train_x.columns: \n",
    "    if(train_x[i].dtype == object):\n",
    "        k.append(i)\n",
    "k"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#null replacement:\n",
    "\n",
    "for i in range(len(k)):\n",
    "    train_x[k[i]].fillna('-999',inplace=True)\n",
    "    train_x[k[i]]=train_x[k[i]].replace([np.nan],'-999')\n",
    "    train_x[k[i]]=train_x[k[i]].replace([np.inf,-np.inf],'-999')\n",
    "    train_x[k[i]]=train_x[k[i]].replace([np.inf,-np.inf],'-999')\n",
    "    train_x[k[i]]=train_x[k[i]].astype(str)\n",
    "\n",
    "train_x.fillna(-999,inplace=True)\n",
    "train_x=train_x.replace([np.nan],-999)\n",
    "train_x=train_x.replace([np.inf,-np.inf],-999)\n",
    "train_x=train_x.replace([np.inf,-np.inf],-999)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#encoding:\n",
    "labelEncoder = LabelEncoder()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#obje değişkenler için _L suffix ekler ve label encoding yapar:\n",
    "for i in range(len(k)):\n",
    "    train_x[k[i]+'_L'] = labelEncoder.fit_transform(train_x[k[i]])\n",
    "    \n",
    "for i in range(len(k)):\n",
    "    test_x[k[i]+'_L'] = labelEncoder.fit_transform(test_x[k[i]])\n",
    "    \n",
    "for i in range(len(k)):\n",
    "    oot_x[k[i]+'_L'] = labelEncoder.fit_transform(oot_x[k[i]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#obje kolonları siler:\n",
    "train_x.drop(k, axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_x.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#one-hot encoding: \n",
    "#train_x = pd.get_dummies(train_x, columns=['RT_OCCUPATION','RT_SECTOR_TYPE_DESC','RT_WORKING_TYPE_DESC','RT_EMPLOYMENT_TYPE','RT_CUSTOMER_TYPE' ])    \n",
    "#test_x = pd.get_dummies(test_x, columns=['RT_OCCUPATION','RT_SECTOR_TYPE_DESC','RT_WORKING_TYPE_DESC','RT_EMPLOYMENT_TYPE','RT_CUSTOMER_TYPE' ]) \n",
    "#oot_x = pd.get_dummies(oot_x, columns=['RT_OCCUPATION','RT_SECTOR_TYPE_DESC','RT_WORKING_TYPE_DESC','RT_EMPLOYMENT_TYPE','RT_CUSTOMER_TYPE' ]) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#kolon isimlerini değiştirme:\n",
    "#train_x.rename(columns={'RT_SECTOR_TYPE_DESC_-9999.0':'RT_SECTOR_TYPE_DESC_9999',\n",
    "#                        'RT_WORKING_TYPE_DESC_-9999.0':'RT_WORKING_TYPE_DESC_9999'}, inplace = True) \n",
    "#test_x.rename(columns={'RT_SECTOR_TYPE_DESC_-9999.0':'RT_SECTOR_TYPE_DESC_9999.0',\n",
    "#                        'RT_WORKING_TYPE_DESC_-9999.0':'RT_WORKING_TYPE_DESC_9999'}, inplace = True) \n",
    "#oot_x.rename(columns={'RT_SECTOR_TYPE_DESC_-9999.0':'RT_SECTOR_TYPE_DESC_9999.0',\n",
    "#                        'RT_WORKING_TYPE_DESC_-9999.0':'RT_WORKING_TYPE_DESC_9999'}, inplace = True) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#kolon isimlerini listeler:\n",
    "pd.DataFrame(train_x.columns).to_excel('ticari_final_shortlist'+str(datetime.today().strftime(\"%Y_%m_%d\"))+'.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "oot_x_new = oot_x[train_x.columns] \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#test_x[['RT_EMPLOYMENT_TYPE_10.0', 'RT_EMPLOYMENT_TYPE_13.0', \n",
    "#        'RT_EMPLOYMENT_TYPE_31.0', 'RT_EMPLOYMENT_TYPE_33.0', \n",
    "#        'RT_EMPLOYMENT_TYPE_34.0', 'RT_EMPLOYMENT_TYPE_35.0', \n",
    "#        'RT_EMPLOYMENT_TYPE_36.0', 'RT_EMPLOYMENT_TYPE_48.0', \n",
    "#        'RT_EMPLOYMENT_TYPE_52.0', 'RT_EMPLOYMENT_TYPE_55.0']] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_x_new = test_x[train_x.columns]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rgs = [sk.ensemble.RandomForestRegressor(n_jobs=-1), sk.ensemble.GradientBoostingRegressor(),\n",
    "      XGBRegressor()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_y.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_x=train_x.drop(columns=['min_acqdate_open','min_acqdate_ever'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#hangi model daha iyi sonuç verir: (metrik:MAE) (cross_val_score'un scoring değiştirilecek)\n",
    "nfolds = 2\n",
    "kf = KFold(n_splits=nfolds,random_state=0,shuffle=True)\n",
    "bestmae = 9999999999\n",
    "bestrg = \"\"\n",
    "for rg in rgs:\n",
    "    mae = (sk.model_selection.cross_val_score(rg,train_x,train_y,cv=kf,n_jobs=-1,scoring='neg_mean_absolute_error').mean())\n",
    "    print (str(rg) + ' ' + str(mae))\n",
    "    if  -mae < bestmae:\n",
    "        bestrg = rg\n",
    "        bestmae = -mae\n",
    "        \n",
    "\n",
    "print('***********************************************')\n",
    "print ('Best is... ' + str(bestrg) + ' ' + str(-bestmae) + str(pprint(bestrg.get_params())))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Rkareye göre : hangi model daha iyi sonuç verir: (metrik:MAE) (cross_val_score'un scoring değiştirilecek)\n",
    "nfolds = 2\n",
    "kf = KFold(n_splits=nfolds,random_state=0,shuffle=True)\n",
    "worst_r = -9999999999\n",
    "bestrg = \"\"\n",
    "for rg in rgs:\n",
    "    r_square = (sk.model_selection.cross_val_score(rg,train_x,train_y,cv=kf,n_jobs=-1,scoring='r2').mean())\n",
    "    print (str(rg) + ' ' + str(mae))\n",
    "    if  r_square > worst_r:\n",
    "        bestrg = rg\n",
    "        bestmae = r_square\n",
    "        \n",
    "\n",
    "print('***********************************************')\n",
    "print ('Best is... ' + str(bestrg) + ' ' + str(-bestmae) + str(pprint(bestrg.get_params())))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#en iyi modeli fit etme\n",
    "model=bestrg.fit(train_x,train_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importanceları çıkartır:\n",
    "sorted(zip((model.feature_importances_)*100,train_x.columns),reverse=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#final modeli fit etme:\n",
    "#rg = XGBRegressor()\n",
    "#nfolds = 10\n",
    "#kf = KFold(n_splits=nfolds,random_state=0,shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#model_xgb = rg.fit(train_x,train_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_xgb.get_params()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mae = (sk.model_selection.cross_val_score(rg,train_x,train_y,cv=kf,n_jobs=-1,scoring='neg_mean_absolute_error').mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the parameter grid based on the results of random search \n",
    "param_grid = {\n",
    "    'bootstrap': [True],\n",
    "    'max_depth': [5, 10, 30],\n",
    "    'max_features': ['auto'],\n",
    "    'min_samples_leaf': [100,200,300,500],\n",
    "    'min_samples_split': [2 ,4, 8],\n",
    "    'n_estimators': [100, 200, 300]\n",
    "}\n",
    "# Create a based model\n",
    "rf = RandomForestRegressor()\n",
    "# Instantiate the grid search model\n",
    "grid_search = GridSearchCV(estimator = rf, param_grid = param_grid, \n",
    "                          cv = 3, n_jobs = -1, verbose = 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_search.fit(train_x, train_y_new)\n",
    "grid_search.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_search.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#değişecek gini:\n",
    "def evaluate(model, test_features, test_labels):\n",
    "    predictions = model.predict(test_features)\n",
    "    errors = abs(predictions - test_labels)\n",
    "    mape = 100 * np.mean(errors / test_labels)\n",
    "    accuracy = 100 - mape\n",
    "    print('Model Performance')\n",
    "    print('Average Error: {:0.4f} degrees.'.format(np.mean(errors)))\n",
    "    print('Accuracy = {:0.2f}%.'.format(accuracy))\n",
    "    \n",
    "    return accuracy\n",
    "base_model = RandomForestRegressor(n_estimators = 10, random_state = 42)\n",
    "base_model.fit(train_x, train_y_new)\n",
    "base_accuracy = evaluate(base_model, test_x[train_x.columns], test_y_new)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#test\n",
    "best_grid = grid_search.best_estimator_\n",
    "grid_accuracy = evaluate(best_grid, test_x[train_x.columns], test_y_new)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#oot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_accuracy = evaluate(best_grid, oot_x_new, oot_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "grid_accuracy = evaluate(best_grid, train_x, train_y_new)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#bundan sonrası yok:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##TEST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_y_new = test_y['target_w_inf']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "nfolds = 10\n",
    "kf = KFold(n_splits=nfolds,random_state=0,shuffle=True)\n",
    "bestmae = 9999999999\n",
    "bestrg = \"\"\n",
    "for rg in rgs:\n",
    "    mae = (sk.model_selection.cross_val_score(rg,test_x,test_y_new,cv=kf,n_jobs=-1,scoring='neg_mean_absolute_error').mean())\n",
    "    print (str(rg) + ' ' + str(mae))\n",
    "    if  -mae < bestmae:\n",
    "        bestrg = rg\n",
    "        bestmae = -mae\n",
    "        \n",
    "\n",
    "print('***********************************************')\n",
    "print ('Best is... ' + str(bestrg) + ' ' + str(-bestmae) + 'Parameters currently in use:\\n' + str(pprint(bestrg.get_params())))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##OOT\n",
    "nfolds = 10\n",
    "kf = KFold(n_splits=nfolds,random_state=0,shuffle=True)\n",
    "bestmae = 9999999999\n",
    "bestrg = \"\"\n",
    "for rg in rgs:\n",
    "    mae = (sk.model_selection.cross_val_score(rg,oot_x_new,oot_y,cv=kf,n_jobs=-1,scoring='neg_mean_absolute_error').mean())\n",
    "    print (str(rg) + ' ' + str(mae))\n",
    "    if  -mae < bestmae:\n",
    "        bestrg = rg\n",
    "        bestmae = -mae\n",
    "        \n",
    "\n",
    "print('***********************************************')\n",
    "print ('Best is... ' + str(bestrg) + ' ' + str(-bestmae) + 'Parameters currently in use:\\n' + str(pprint(bestrg.get_params())))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# define dataset\n",
    "\n",
    "# create pipeline\n",
    "rfe = RFE(estimator=RandomForestRegressor(n_jobs=-1), n_features_to_select=100, step=1) ##seçilecek feature adetini revize et(100,75,50)\n",
    "model = RandomForestRegressor()\n",
    "pipeline = Pipeline(steps=[('s',rfe),('m',model)])\n",
    "# evaluate model\n",
    "cv = RepeatedKFold(n_splits=10, n_repeats=3, random_state=1)\n",
    "n_scores = cross_val_score(pipeline, train_x, train_y_new, scoring='neg_mean_absolute_error', cv=cv, n_jobs=-1, error_score='raise')\n",
    "# report performance\n",
    "print('MAE: %.3f (%.3f)' % (mean(n_scores), std(n_scores)))\n",
    "\n",
    "rfe.support_\n",
    "# summarize all features\n",
    "#for i in range(train_x.shape[1]):\n",
    "#print('Column: %d, Selected %s, Rank: %.3f' % (i, rfe.support_[i], rfe.ranking_[i])) ##bunu kontrol et\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create pipeline\n",
    "rfe = RFE(estimator=RandomForestRegressor(), n_features_to_select=5)\n",
    "model = RandomForestRegressor()\n",
    "pipeline = Pipeline(steps=[('s',rfe),('m',model)])\n",
    "# evaluate model\n",
    "cv = RepeatedKFold(n_splits=10, n_repeats=3, random_state=1)\n",
    "n_scores = cross_val_score(pipeline, train_x, train_y, scoring='neg_mean_absolute_error', cv=cv, n_jobs=-1, error_score='raise')\n",
    "# report performance\n",
    "print('MAE: %.3f (%.3f)' % (mean(n_scores), std(n_scores)))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
